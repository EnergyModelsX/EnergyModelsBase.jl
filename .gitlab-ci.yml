
before_script:
  # Install git.
  - apt-get update -qq && apt-get install -y git

  # Install ssh-agent and add the private key.
  - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
  - eval $(ssh-agent -s)
  - echo "$PRIVATE_DEPLOY_KEY_EMB" | tr -d '\r' | ssh-add -

  # Set up the .ssh directory.
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  # Set the known_hosts to a variable containing the public key of gitlab.sintef.no
  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  # Test the ssh connection.
  - ssh -T git@gitlab.sintef.no

  # Add the Clean Export internal registry and the public General registry.
  - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "git@gitlab.sintef.no:clean_export/registrycleanexport.git"))'
  - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "https://github.com/JuliaRegistries/General"))'


# Below is the template to run the tests in Julia
.test_template: &test_definition
  script:
    - echo "Run tests"
    - julia -e 'using Pkg; Pkg.Registry.status()'
    - julia --project=. -e 'using Pkg; Pkg.test(; coverage = true)'
    

test:1.8:
  image: julia:1.8
  <<: *test_definition


# Deploy the documentation.
pages:
  image: julia:1.8
  stage: deploy
  script:
    - cd docs
    - julia -e 'using Pkg; Pkg.Registry.status()'
    - julia --project=. -e 'using Pkg; Pkg.add("Documenter")'  # install Documenter
    - julia --project=. --color=yes make.jl  # make documentation
    - cd ..
    - mv docs/build public  # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# Register version
register:
  image: julia:1.8
  stage: deploy
  script:
    - julia -e 'using Pkg; Pkg.Registry.status()'
    # Set name and email for the bot pushing to the registry.
    - git config --global user.email "registrator@sintef.no"
    - git config --global user.name "Registrator"
    - julia --project="test" -e 'using Pkg; Pkg.instantiate()'  # install dependencies.
    # Register the package. LocalRegistry will not register a new version if it is already registered.
    - julia --project="test" -e 'using LocalRegistry; register()'  # register the package
  rules:
    # Only execute this on the default branch.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
